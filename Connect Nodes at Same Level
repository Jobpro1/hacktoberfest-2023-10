Given a binary tree, connect the nodes that are at same level. You'll be given an addition nextRight pointer for the same.

Initially, all the nextRight pointers point to garbage values. Your function should set these pointers to point next right for each node.
       10                       10 ------> NULL
      / \                       /      \
     3   5       =>     3 ------> 5 --------> NULL
    / \     \               /  \           \
   4   1   2          4 --> 1 -----> 2 -------> NULL

 

Example 1:

Input:
     3
   /  \
  1    2
Output:
3 1 2
1 3 2
Explanation:The connected tree is
        3 ------> NULL
     /    \
    1-----> 2 ------ NULL




class TreeNode:
    def __init__(self, val=0, left=None, right=None, nextRight=None):
        self.val = val
        self.left = left
        self.right = right
        self.nextRight = nextRight

def connectNodesAtSameLevel(root):
    if not root:
        return None

    queue = [root]

    while queue:
        level_size = len(queue)
        prev = None

        for i in range(level_size):
            current = queue.pop(0)

            if prev:
                prev.nextRight = current

            prev = current

            if current.left:
                queue.append(current.left)
            if current.right:
                queue.append(current.right)

# Helper function to print the connected nodes at the same level
def printConnectedNodesAtSameLevel(root):
    while root:
        current = root
        while current:
            print(current.val, end=" ")
            current = current.nextRight
        print()
        root = root.left

# Example usage
root = TreeNode(10)
root.left = TreeNode(3)
root.right = TreeNode(5)
root.left.left = TreeNode(4)
root.left.right = TreeNode(1)
root.right.right = TreeNode(2)
connectNodesAtSameLevel(root)
printConnectedNodesAtSameLevel(root)
